defmodule PhoenixDDOS.Engine do


  # [
  #   {PhoenixDDOS.IpRateLimit, [%{allowed: 10000, id: "6EKn", period_ms: 2000}]},
  #   {PhoenixDDOS.IpRateLimitPerRequestPath,
  #    [%{allowed: 3, id: "Ggnf", paths: ["/admin"], period_ms: 60000}]}
  # ]

  def control(conn) do
    ip = conn.remote_ip |> :inet.ntoa()

    if PhoenixDDOS.Jail.in_jail?(ip) do
      PhoenixDDOS.Dredd.reject(conn)
    else

      decisions = [
        # for each IpRateLimit
        RateLimit.incr_check("ip_gre3_#{ip}", 50_000, 100, :block),

       # if any IpRateLimitPerRequestPath
       check_ip_path(ip, conn.request_path)
     ]
     # [:pass, :block, :jail, :pass]

     cond do
       :jail in decisions ->
         PhoenixDDOS.Jail.send(ip)
         PhoenixDDOS.Dredd.reject(conn)
         :block in decisions ->
           PhoenixDDOS.Dredd.reject(conn)

           :pass in decisions ->
             conn
     end
    end


  end




  # for each IpRateLimitPerRequestPath
  def check_ip_path(ip, "/admin") do
    Cache.incr_check("ip_sda_#{ip}", 50_000, 100, :jail)
  end

  # always here
  def check_ip_path(request, _), do: :pass
end
