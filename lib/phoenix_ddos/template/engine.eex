
defmodule PhoenixDDoS.Checkers do

<%= if ip_registers != [] do %>
  def checkers(ip) do

    [
      <%= for {prot, cfg} <- ip_registers do %>
        {"<%= cfg.id %>", <%= prot %>.rate_key("<%= cfg.id %>", ip),<%= PhoenixDDoS.Time.period_to_msec(cfg.period) %>, <%=  cfg.allowed %>, :<%=  cfg.sentence %>},
      <% end %>
    ]
  end
<% else %>
  def checkers(_), do: []

<% end %>

<%= for {chunks, prots} <- request_path_registers do %>
  def checkers(ip, [<%= chunks %>]) do
    [
<%= prots |> Enum.map(fn {prot, cfg} -> %>
      {"<%= cfg.id %>", <%= prot %>.rate_key("<%= cfg.id %>", ip),<%= PhoenixDDoS.Time.period_to_msec(cfg.period) %>, <%=  cfg.allowed %>, :<%=  cfg.sentence %>},
<% end) %>
    ] ++ checkers(ip)
  end
<% end %>

  def checkers(ip, _), do: checkers(ip)
end

defmodule PhoenixDDoS.Engine do
  alias PhoenixDDoS.Checkers
  alias PhoenixDDoS.Dredd
  alias PhoenixDDoS.Jail
  alias PhoenixDDoS.RateLimit
  alias PhoenixDDoS.RequestContext
  alias PhoenixDDoS.Telemetry

  require Logger

  <% # returns {decision, prot_that_decide_it} %>
  def control(conn) do
    PhoenixDDoS.RequestContext.feed(conn)

    ip = RequestContext.get(:ip)

    cond do
<%= if Application.get_env(:phoenix_ddos, :blocklist_ips, []) != [] do %>
      blocklist_ips?(ip) ->
        Telemetry.push_request_new(:block)

        Dredd.reject(conn)
<% end %>
<%= if Application.get_env(:phoenix_ddos, :safelist_ips, []) != [] do %>
      safelist_ips?(ip) ->
        Telemetry.push_request_new(:pass)

        conn
<% end %>

      Jail.in_jail?(ip) ->
        Dredd.reject(conn)

      true ->
        decisions =
<%= if request_path_registers != [] do %>
        ip
        |> Checkers.checkers(String.split(conn.method <> "/" <> conn.request_path, "/"))
<% else %>
        ip
        |> Checkers.checkers()
<% end %>
        # |> IO.inspect()
        |> RateLimit.batch_check()

        cond do
          decisions[:jail] ->
            prot = get_prot_cfg(decisions[:jail])

            Logger.warning(
              "üõ°Ô∏è PhoenixDDoS: ip[#{ip}] goes to JAIL. From prot #{inspect(prot)} with love"
            )

            Jail.send(ip, prot)

<%= if Application.get_env(:phoenix_ddos, :on_jail_alert_to_sentry) do %>
            AlertSentry.alert_goes_to_jail(prot)
<% end %>

            Telemetry.push_request_new(:jail)

            Dredd.reject(conn)

          decisions[:block] ->
            Telemetry.push_request_new(:block)

            <% # for now we don't log block since it could cause log overload %>
            Dredd.reject(conn)

          true ->
            Telemetry.push_request_new(:pass)

            conn
        end
      end
  end


<%= for {prot, cfg} <- Application.get_env(:phoenix_ddos,:_prots) do %>
  def get_prot_cfg("<%= cfg.id %>"), do: {<%= prot %>, <%= inspect(cfg) %>}
<% end %>
  def get_prot_cfg(_), do: {nil, nil}

<%= for ip <- Application.get_env(:phoenix_ddos, :blocklist_ips, []) do %>
  def blocklist_ips?(<%= inspect(ip) %>), do: true
<% end %>
  def blocklist_ips?(_), do: false

<%= for ip <- Application.get_env(:phoenix_ddos, :safelist_ips, []) do %>
  def safelist_ips?(<%= inspect(ip) %>), do: true
<% end %>
  def safelist_ips?(_), do: false
end
